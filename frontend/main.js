import { Telegraf, Markup  } from 'telegraf';
import * as dotenv from 'dotenv';
import { addUser, addPlant, getUserId, getPlants, getPlant, waterPlantByPlantId, waterPlantByUserId, updateFrequency, deletePlant, updStatus, getActiveUsers, deactivateUser } from "./requests.js";
import moment from 'moment';
import { logError, logInfo, logWarn } from './logger.js';

dotenv.config();

const token = process.env.BOT_TOKEN;
if (!token) {
  logError(new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è'), {
    operation: 'bot_startup',
    context: 'environment_check'
  });
  process.exit(1);
}

const bot = new Telegraf(token);

const WATCH_FREQUENCY = moment.duration({ 'days': 1 });
const MAX_PLANT_NAME_LENGTH = 50;
const MAX_WATERING_FREQUENCY = 365;
const MIN_WATERING_FREQUENCY = 1;

const activeIntervals = new Map();

const PRESET_MESSAGES = {
  NEW_PLANT: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–∏–≤–∞ –≤ –¥–Ω—è—Ö (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)',
  INCORRECT_INPUT: '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä "–ê–Ω—Ç—É—Ä–∏—É–º 7"',
  EDIT_PLANT: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–∏–≤–∞ (–≤ –¥–Ω—è—Ö –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º) –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è '
};

const mainKeyboard = Markup.inlineKeyboard([
  [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è', 'addPlant')],
  [Markup.button.callback('–ü–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ', 'waterPlant')],
  [Markup.button.callback('–ü–æ–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', 'waterAllPlants')],
  [Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–∏–≤–∞', 'editPlant')],
  [Markup.button.callback('–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ', 'deletePlant')],
]).resize();

bot.telegram.setMyCommands([
  { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≤–∞' },
  { command: 'menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
  { command: 'help', description: '–ü–æ–º–æ—â—å' },
  { command: 'stop', description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ' },
]);

bot.use(async (ctx, next) => {
  const start = new Date();
  await next();
  const ms = new Date().getTime() - start.getTime();
  logInfo(`Response time: ${ms}ms`, {
    operation: 'telegram_request',
    updateType: ctx.updateType,
    duration: ms
  });
});

bot.catch((err, ctx) => {
  logError(err, {
    operation: 'telegram_request',
    updateType: ctx.updateType,
    context: 'bot_catch'
  });
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
});

async function restoreIntervals() {
  try {
    logInfo('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', {
      operation: 'restore_intervals'
    });
    const activeUsers = await getActiveUsers();
    
    for (const user of activeUsers) {
      if (user.chat_id && user.is_active) {
        logInfo(`–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name} (ID: ${user.id})`, {
          operation: 'restore_interval',
          user_id: user.id,
          username: user.name
        });
        await startWatch(user.id, user.chat_id);
      }
    }
    
    logInfo(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, {
      operation: 'restore_intervals_complete',
      count: activeUsers.length
    });
  } catch (error) {
    logError(error, {
      operation: 'restore_intervals',
      context: 'restore_intervals_error'
    });
  }
}

bot.start(async (ctx) => {
  try {
    const username = ctx.message.from.username;
    if (!username) {
      return ctx.reply('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å username –≤ Telegram.');
    }

    const chat_id = ctx.chat.id;
    
    const result = await addUser(username, chat_id);
    
    if (result) {
      const user_id = result.user_id;
      
      if (result.is_new) {
        const res = await startWatch(user_id, chat_id);
        if (res) {
          ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!`, mainKeyboard);
        } else {
          ctx.reply('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        }
      } else {
        if (activeIntervals.has(user_id)) {
          clearInterval(activeIntervals.get(user_id));
          activeIntervals.delete(user_id);
          logInfo(`–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${user_id})`, {
            operation: 'clear_old_interval',
            user_id: user_id,
            username: username
          });
        }
        
        const res = await startWatch(user_id, chat_id);
        if (res) {
          ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}! –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≤–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.`, mainKeyboard);
        } else {
          ctx.reply('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        }
      }
    } else {
      ctx.reply('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.');
    }
  } catch (error) {
    logError(error, {
      operation: 'bot_start_command',
      username: username,
      context: 'start_command_error'
    });
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.');
  }
});

bot.command('menu', (ctx) => {
  ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainKeyboard);
});

bot.command('help', (ctx) => {
  const helpText = `
ü§ñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ

*–§—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã –ø–æ–ª–∏–≤–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ
‚Ä¢ –†—É—á–Ω–æ–π –ø–æ–ª–∏–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –∏–ª–∏ –≤—Å–µ—Ö —Å—Ä–∞–∑—É
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø–æ–ª–∏–≤–∞
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π

*–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è:*
–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è + –ø—Ä–æ–±–µ–ª + —á–∞—Å—Ç–æ—Ç–∞ –ø–æ–ª–∏–≤–∞ –≤ –¥–Ω—è—Ö
–ü—Ä–∏–º–µ—Ä: "–ê–Ω—Ç—É—Ä–∏—É–º 7"

*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: –¥–æ ${MAX_PLANT_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–ª–∏–≤–∞: –æ—Ç ${MIN_WATERING_FREQUENCY} –¥–æ ${MAX_WATERING_FREQUENCY} –¥–Ω–µ–π
  `;
  ctx.reply(helpText, { parse_mode: 'Markdown' });
});

bot.command('stop', async (ctx) => {
  try {
    const username = ctx.message.from.username;
    if (!username) {
      return ctx.reply('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å username –≤ Telegram.');
    }

    const user_id = await getUserId(username);
    if (user_id > 0) {
      if (activeIntervals.has(user_id)) {
        clearInterval(activeIntervals.get(user_id));
        activeIntervals.delete(user_id);
        logInfo(`–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${user_id})`, {
          operation: 'stop_user_interval',
          user_id: user_id,
          username: username
        });
      }
      
      const deactivated = await deactivateUser(user_id);
      if (deactivated) {
        ctx.reply('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≤–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.', mainKeyboard);
      } else {
        ctx.reply('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      }
    } else {
      ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
  } catch (error) {
    logError(error, {
      operation: 'bot_stop_command',
      username: username,
      context: 'stop_command_error'
    });
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.');
  }
});

async function startWatch(user_id, chat_id) {
  try {
    const interval = setInterval(async () => {
      try {
        const result = await checkplants(user_id);
        if (result.length > 0) {
          await bot.telegram.sendMessage(chat_id, result, { reply_markup: mainKeyboard });
        }
      } catch (error) {
        logError(error, {
          operation: 'check_plants_interval',
          user_id: user_id,
          context: 'check_plants_error'
        });
      }
    }, WATCH_FREQUENCY.asMilliseconds());
    
    activeIntervals.set(user_id, interval);
    
    return true;
  } catch (error) {
    logError(error, {
      operation: 'start_watch',
      user_id: user_id,
      context: 'start_watch_error'
    });
    return false;
  }
}

async function checkplants(user_id) {
  try {
    const currentDate = moment.utc().format('YYYY-MM-DD');
    let result = '–°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –ø–æ–ª–∏—Ç—å: \n';
    let needToWater = false;
    
    const plants = await getPlants(user_id);
    if (!plants || !Array.isArray(plants)) {
      logError(new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'), {
        operation: 'check_plants',
        user_id: user_id,
        context: 'get_plants_error'
      });
      return '';
    }
    
    for (let plant of plants) {
              if (!plant.last_watered || !plant.watering_frequency) {
          logWarn('–†–∞—Å—Ç–µ–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', {
            operation: 'check_plants',
            user_id: user_id,
            plant: plant,
            context: 'invalid_plant_data'
          });
          continue;
        }
      
      const nextWateringDate = moment
        .utc(parseInt(plant.last_watered))
        .add(parseInt(plant.watering_frequency), 'days')
        .format('YYYY-MM-DD');
                        
      if (moment(currentDate).isSameOrAfter(nextWateringDate)) {
        result += `üå± ${plant.plant_name}\n`;
        needToWater = true;
      }
    }
    
    return needToWater ? result : '';
  } catch (error) {
    logError(error, {
      operation: 'check_plants',
      user_id: user_id,
      context: 'check_plants_main_error'
    });
    return '';
  }
}

bot.action('addPlant', async (ctx) => {
  const messageDateTime = ctx.update.callback_query.message.date * 1000
  if ( checkMessage(messageDateTime)) {
    await ctx.deleteMessage();
  }
  const user_id = await getUserId(ctx.update.callback_query.from.username);
  if (user_id > 0) {
    await ctx.replyWithHTML(PRESET_MESSAGES.NEW_PLANT, {
      reply_markup: {
          force_reply: true,
      },
    });
  } else {
    ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

bot.action('editPlant', async(ctx) => {
  let user_id = await getUserId(ctx.update.callback_query.from.username);
  let keyWord = 'edit'
  if (user_id > 0) {
    let plants = await getPlants(user_id)
    if (plants.length) {
      let moreButtons = [{name:'–û—Ç–º–µ–Ω–∞', id: keyWord+'_0'}]
      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ', await plantListButtons(plants, keyWord, moreButtons));
    } else {
      ctx.reply(`–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è`, mainKeyboard)
    }
  } else {
    ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
})

bot.action('deletePlant', async(ctx) => {
  let user_id = await getUserId(ctx.update.callback_query.from.username);
  let keyWord = 'delete'  
  if (user_id > 0) {
    let plants = await getPlants(user_id)
    if (plants.length) {
      let moreButtons = [{name:'–û—Ç–º–µ–Ω–∞', id: keyWord+'_0'}]
      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ', await plantListButtons(plants, keyWord, moreButtons));
    } else {
      ctx.reply(`–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è`, mainKeyboard)
    }
  } else {
    ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
})

function checkMessage(messageDateTime) {
  const now = moment.now()
  const hoursDifference = (now - messageDateTime) / (1000 * 60 * 60);
  return  hoursDifference <= 48
}

bot.action('waterPlant', async(ctx) => {
  const messageDateTime = ctx.update.callback_query.message.date * 1000
  if ( checkMessage(messageDateTime)) {
    await ctx.deleteMessage();
  }
  let user_id = await getUserId(ctx.update.callback_query.from.username);
  let keyWord = 'water'
  if (user_id > 0) {
    let plants = await getPlants(user_id, [])
    if (plants.length) {
      let moreButtons = [{name:'–ü–æ–ª–∏—Ç—å –≤—Å–µ', id: 'water_0'}]

      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–∏–≤–∞', await plantListButtons(plants, keyWord, moreButtons));
    } else {
      ctx.reply('–í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π', mainKeyboard);
    }
  } else {
    ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
})

bot.action('waterAllPlants', async(ctx) => {
  const messageDateTime = ctx.update.callback_query.message.date * 1000
  if ( checkMessage(messageDateTime)) {
    await ctx.deleteMessage();
  }
  let user_id = await getUserId(ctx.update.callback_query.from.username);
  if (user_id > 0) {
    let waterRes = await waterPlant(0, user_id)
    waterRes ? ctx.reply(`–í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ–ª–∏—Ç—ã`, mainKeyboard) : ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º`, mainKeyboard);
  } else {
    ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

})

bot.action(/edit_/, async(ctx) => {
  const messageDateTime = ctx.update.callback_query.message.date * 1000
  if ( checkMessage(messageDateTime)) {
    await ctx.deleteMessage();
  }
  const plantId = ctx.callbackQuery.data.replace('edit_', '');
  if (!isNaN(parseFloat(plantId))) {
    let userId = await getUserId(ctx.update.callback_query.from.username);
    if (userId > 0) {
      let plantName = await getPlant(plantId)
      console.log(plantId);
      
      if (plantName) {
        await ctx.replyWithHTML(PRESET_MESSAGES.EDIT_PLANT + plantName.plant_name.trim(), {
          reply_markup: {
              force_reply: true,
          },
        });
      } else {
        ctx.reply(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞`, mainKeyboard)
      }
    } else {
      ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  } else {
    ctx.reply(`–û—Ç–º–µ–Ω–µ–Ω–æ`, mainKeyboard)
  }
})

bot.action(/delete_/, async(ctx) => {
  const messageDateTime = ctx.update.callback_query.message.date * 1000
  if ( checkMessage(messageDateTime)) {
    await ctx.deleteMessage();
  }
  const plantId = ctx.callbackQuery.data.replace('delete_', '');
  if (!isNaN(parseFloat(plantId))) {
    let userId = await getUserId(ctx.update.callback_query.from.username);
    if (userId > 0) {
      let plantName = await getPlant(plantId)
      if (plantName) { 
        const result = await deletePlant(plantId)
        if (result) {
          ctx.reply(`–†–∞—Å—Ç–µ–Ω–∏–µ "${plantName.plant_name.trim()}" ,–±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.`, mainKeyboard);
        } else {
          ctx.reply('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è!');
        }
      } else {
        ctx.reply(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞`, mainKeyboard)
      }
    } else {
      ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  } else {
    ctx.reply(`–û—Ç–º–µ–Ω–µ–Ω–æ`, mainKeyboard)
  }
})

bot.action(/water_/, async (ctx) => {
  const messageDateTime = ctx.update.callback_query.message.date * 1000
  if ( checkMessage(messageDateTime)) {
    await ctx.deleteMessage();
  }
  const plantId = ctx.callbackQuery.data.replace('water_', '');
  if (!isNaN(parseFloat(plantId))) {
    let userId = await getUserId(ctx.update.callback_query.from.username);
    let waterRes = await waterPlant(parseFloat(plantId), userId)
    let plantName = await getPlant(plantId)
    plantName = plantName ? plantName.plant_name : ''
    waterRes ? ctx.reply(`–†–∞—Å—Ç–µ–Ω–∏–µ ${plantName} –ø–æ–ª–∏—Ç–æ`, mainKeyboard) : ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—é ${plantName}`, mainKeyboard);
  } else {
    ctx.reply(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞`, mainKeyboard)
  }
});

bot.on('text', async (ctx) => {
  const user_id = await getUserId(ctx.message.from.username);
  const regExp = /^.+\s\d+(\.\d+)?$/
  let input
  if (user_id > 0) {
    if (ctx.message.reply_to_message) {
      const repliedText = ctx.message.reply_to_message.text;
      if (repliedText === PRESET_MESSAGES.NEW_PLANT || repliedText === PRESET_MESSAGES.INCORRECT_INPUT) { 
        input = ctx.message.text.trim().replace(/\s{2,}/g, ' ')
        if (regExp.test(input)) {
          let plantData = splitInput(input)
          if (plantData !== null) {
            const newPlant = {
              user_id: user_id, 
              plant_name: plantData.plant_name,
              watering_frequency: plantData.watering_frequency,
              last_watered: moment.now(),
              is_fine: true
            }
            const result = await addPlant(newPlant);
            if (result) {
              ctx.reply(`–†–∞—Å—Ç–µ–Ω–∏–µ "${plantData.plant_name}" —Å —á–∞—Å—Ç–æ—Ç–æ–π –ø–æ–ª–∏–≤–∞ ${plantData.watering_frequency.toString()} –¥. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ`, mainKeyboard);
            } else {
              ctx.reply('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è!');
            }
          }
        } else {
          await ctx.replyWithHTML(PRESET_MESSAGES.INCORRECT_INPUT, {
            reply_markup: {
              force_reply: true,
            },
          });
        }
      } else if (new RegExp("^" + PRESET_MESSAGES.EDIT_PLANT.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + ".*").test(repliedText)) {
        input = ctx.message.text.trim()
        
        let plantName = repliedText.replace(new RegExp("^" + PRESET_MESSAGES.EDIT_PLANT.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')), '')
        if (isNaN(parseFloat(input)) || !plantName.length ) {
          ctx.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', mainKeyboard);
        } else {
          let plantId = await getPlant(null, plantName)
          if (!plantId) {
            ctx.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', mainKeyboard);
          } else {
            let result = await updateFrequency(plantId.id, parseFloat(input));
            
            if (result) {
              ctx.reply('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', mainKeyboard);
            } else {
              ctx.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', mainKeyboard);
            }
          }
        }
      } else {
        ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', mainKeyboard);
      }
    } else {
      ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', mainKeyboard);
    }
  }
});

async function waterPlant(plantId, userId) {
  if (plantId === 0) {
    return waterPlantByUserId(userId, moment.now())
  } else {
    return waterPlantByPlantId(plantId, moment.now())
  }
}

async function plantListButtons(plants, key, moreButtons) {
  const keyPlantList = Markup.inlineKeyboard(
    plants.map((plant) => [Markup.button.callback(plant.plant_name.trim(), key+`_${plant.id}`)])
  );
  if (moreButtons.length) {
    moreButtons.map((button) => keyPlantList.reply_markup.inline_keyboard.push([Markup.button.callback(button.name, button.id)]))
  }
  return keyPlantList
}

function splitInput(inputString) {
  const regex = /^(.*\S)\s(\d+(\.\d+)?)\s*$/;
  const matches = inputString.match(regex);
  const plantData = {}
  if (matches && matches.length >= 3) {
    plantData.plant_name = matches[1];
    const wateringFrequency = parseFloat(matches[2]);
    if (!isNaN(wateringFrequency)) {
        plantData.watering_frequency = wateringFrequency;
    } else {
        logWarn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞—Å—Ç–æ—Ç—ã –ø–æ–ª–∏–≤–∞", {
          operation: 'split_input',
          input: inputString,
          context: 'watering_frequency_parse_error'
        });
        return null
    }
  } else {
    logWarn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥", {
      operation: 'split_input',
      input: inputString,
      context: 'invalid_input_format'
    });
    return null
  }
  return plantData
}

process.once('SIGINT', () => {
  logInfo('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...', {
    operation: 'bot_shutdown',
    signal: 'SIGINT'
  });
  for (const [userId, interval] of activeIntervals) {
    clearInterval(interval);
    logInfo(`–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`, {
      operation: 'clear_interval',
      user_id: userId,
      signal: 'SIGINT'
    });
  }
  activeIntervals.clear();
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  logInfo('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...', {
    operation: 'bot_shutdown',
    signal: 'SIGTERM'
  });
  for (const [userId, interval] of activeIntervals) {
    clearInterval(interval);
    logInfo(`–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`, {
      operation: 'clear_interval',
      user_id: userId,
      signal: 'SIGTERM'
    });
  }
  activeIntervals.clear();
  bot.stop('SIGTERM');
});

bot.launch().then(() => {
  logInfo('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!', {
    operation: 'bot_launch_success'
  });
  restoreIntervals();
}).catch((error) => {
  logError(error, {
    operation: 'bot_launch',
    context: 'launch_error'
  });
  process.exit(1);
});
